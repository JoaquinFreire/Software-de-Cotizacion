using System.ComponentModel.DataAnnotations.Schema;

namespace Domain.Entities;

public class User
{
    public int id { get; set; }
    public string name { get; set; }
    public string lastname { get; set; }
    public string Legajo { get; set; } = string.Empty;
    public string password_hash { get; set; } = string.Empty;
    public int role_id { get; set; }  // Clave foránea
    public UserRole role { get; set; }  // Navegación

    public User() { }

    /*     public User(string name, string lastname, UserRole role)
    {
        this.name = name;
        this.lastname = lastname;
        this.role = role;
    } */

}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Entities
{
    public class UserRole
    {
        public int id { get; set; }
        public string? name { get; set; }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Domain.Entities;

namespace Domain.Repositories;
public interface IUserRepository
{
    Task<User?> GetByLegajoAsync(string legajo);
    /* void CreateUser(User user);
    public interface DeleteUser { }
    public interface UpdateUser { } */
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Repositories;
public interface IRepository<T> where T : class
{
    Task<T?> GetByIdAsync(Guid id);
    Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
}
using Domain.Entities;
using Domain.Repositories;
using System.Threading.Tasks;
using BCrypt.Net;

public class LoginUser
{
    private readonly IUserRepository _userRepository;

    public LoginUser(IUserRepository userRepository)
    {
        _userRepository = userRepository;
    }

    public async Task<User?> AuthenticateAsync(string legajo, string password)
    {
        var user = await _userRepository.GetByLegajoAsync(legajo);
        if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.password_hash  ))
        {
            return null;
        }
        return user;
    }
}
using Microsoft.EntityFrameworkCore;
using Domain.Entities;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<User>().ToTable("user"); // Forzar el nombre de la tabla en MySQL

        // Si UserRole es un ENUM, guardar como INT
        modelBuilder.Entity<User>()
             .HasOne(u => u.role)
                .WithMany()
                    .HasForeignKey(u => u.role_id)
                        .OnDelete(DeleteBehavior.Restrict);
        // Guarda el enum como número
    }
}
using Microsoft.EntityFrameworkCore;
using Domain.Entities;
using Domain.Repositories;

public class UserRepository : IUserRepository
{
    private readonly AppDbContext _context;

    public UserRepository(AppDbContext context)
    {
        _context = context;
    }

    public async Task<User?> GetByLegajoAsync(string legajo)
    {
        return await _context.Users.FirstOrDefaultAsync(u => u.Legajo == legajo);
    }
}
using Infrastructure;
using Infrastructure.Persistence.MongoDBContext;
using Microsoft.Extensions.Options;
using Domain.Repositories;
using Microsoft.EntityFrameworkCore;
using Domain.UseCases;
using Swashbuckle.AspNetCore.SwaggerGen;
// using Infrastructure.Persistence; // Asegúrate de que esta referencia sea correcta

var builder = WebApplication.CreateBuilder(args);
var configuration = builder.Configuration;

// Configurar Entity Framework con MySQL (usando Pomelo)
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString)));

// Configurar logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();

// Inyectar dependencias
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<LoginUser>();

// Agregar controladores y Swagger
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Agrega la configuraci�n de Mongo
builder.Services.Configure<MongoDbSettings>(configuration.GetSection("MongoDbSettings"));
builder.Services.AddSingleton(sp => sp.GetRequiredService<IOptions<MongoDbSettings>>().Value);

// Registramos los servicios de infraestructura
builder.Services.AddInfrastructure(configuration);

var app = builder.Build();

// Configurar middleware
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseRouting();
app.UseAuthorization();

// Definir endpoint adicional
var summaries = new[]
{
    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
};

app.MapGet("/weatherforecast", () =>
{
    var forecast = Enumerable.Range(1, 5).Select(index =>
        new WeatherForecast
        (
            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            Random.Shared.Next(-20, 55),
            summaries[Random.Shared.Next(summaries.Length)]
        ))
        .ToArray();
    return forecast;
})
.WithName("GetWeatherForecast")
.WithOpenApi();

app.MapControllers();

app.Run();

record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}

